#!/bin/bash

# https://buildkite.com/docs/pipelines/writing-build-scripts
set -euo pipefail

# common

function check_if_empty () {
    if [ "$1" == "" ]; then
        echo "$2 is empty"
        exit $3
    fi
}

pwd=$(pwd)

version=${VERSION:-""}
version=${BUILDKITE_PLUGIN_DOTNET_NUGET_VERSION:-$version}
check_if_empty $version VERSION 2

docker=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOCKER:-docker}
debug=${BUILDKITE_PLUGIN_DOTNET_NUGET_DEBUG:-0}
if [ $debug -gt 0 ]; then
    set -euox pipefail

    if [ $debug -eq 2 ]; then
        env
    fi

    $docker version
    $docker ps
    whoami
    pwd
fi

tmp=.tmp
tmp=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOCKER:-$tmp}

# dotnet runtime version
runtime="3.1"
runtime=${BUILDKITE_PLUGIN_DOTNET_NUGET_RUNTIME:-$runtime}
# docker image with dotnet runtime version 
image="dxdx/docker-builder-dotnet:$runtime"
image=${BUILDKITE_PLUGIN_DOTNET_NUGET_IMAGE:-$image}

src=${BUILDKITE_PLUGIN_DOTNET_NUGET_SRC:-src}
tpl=${BUILDKITE_PLUGIN_DOTNET_NUGET_TPL:-nuget.config.tpl}
dotnet=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOTNET:-dotnet}
buildkite_agent=${BUILDKITE_PLUGIN_DOTNET_NUGET_AGENT:-buildkite-agent}
configuration=${BUILDKITE_PLUGIN_DOTNET_NUGET_CONFIGURATION:-Release}
symbols=${BUILDKITE_PLUGIN_DOTNET_NUGET_SYMBOLS:-1}
dryrun=${BUILDKITE_PLUGIN_DOTNET_NUGET_DRY:-0}

# github
github_owner=$(echo "$BUILDKITE_REPO" | cut -d: -f 2 | cut -d/ -f 1)
github_repo=$(echo "$BUILDKITE_REPO" | cut -d: -f 2 | cut -d/ -f 2 | cut -d. -f 1)

# nuget
nuget_baseurl="https://nuget.pkg.github.com/${github_owner}/index.json"
nuget_baseurl=${NUGET_BASEURL:-$nuget_baseurl}
nuget_baseurl=${BUILDKITE_PLUGIN_DOTNET_NUGET_BASE_URL:-$nuget_baseurl}
nuget_auth_user=${BUILDKITE_PLUGIN_DOTNET_NUGET_AUTH_USER:-$NUGET_AUTH_USER}
nuget_auth_key=${BUILDKITE_PLUGIN_DOTNET_NUGET_AUTH_KEY:-$NUGET_AUTH_KEY}
#nuget_packages=${BUILDKITE_PLUGIN_DOTNET_NUGET_PACKAGES}
pull=${BUILDKITE_PLUGIN_DOTNET_NUGET_PULL:-1}
if [ $pull -gt 0 ]; then
    $docker pull $image
fi
check_if_empty $nuget_baseurl NUGET_BASEURL 1
check_if_empty $nuget_auth_user NUGET_AUTH_USER 1
check_if_empty $nuget_auth_key NUGET_AUTH_KEY 1

export NUGET_BASEURL=$nuget_baseurl
export NUGET_AUTH_USER=$nuget_auth_user
export NUGET_AUTH_KEY=$nuget_auth_key

# folders
wrkdir=$pwd
docker_wrkdir=/build
if [ -d "$src" ]; then
    wrkdir=$wrkdir/$src
    docker_wrkdir=$docker_wrkdir/$src
fi

if [ -d "$src" ]; then
    if [ -e "$tpl" ]; then
        cp $tpl $src/NuGet.Config
    fi
elif [ -e "$tpl" ]; then
    cp $tpl NuGet.Config
fi

if [ ! -d "$tmp" ]; then
    mkdir $tmp -p
fi

function dotnet_execute() {
    env > .env
    # $docker run -e "NUGET_BASEURL=$nuget_baseurl" -e "NUGET_AUTH_USER=$nuget_auth_user" -e "NUGET_AUTH_KEY=$nuget_auth_key" -v $pwd:/build -w $wrkdir --entrypoint $dotnet $image $*
    $docker run --env-file .env -v $pwd:/build -w $docker_wrkdir --entrypoint $dotnet $image $*
    # TODO: need to delete the file event when the run failed
    rm .env
}

if [ $debug -gt 0 ]; then
    dotnet_execute --info
    dotnet_execute --list-runtimes
    dotnet_execute --list-sdks
    dotnet_execute nuget --version
fi

# pack

dotnet_execute pack -c $configuration /p:Version=$version --include-symbols -o $tmp/$configuration

# push

# TODO: check packages input

function push_dir() {
    local packages=$1
    local ext=$2

    for p in $packages
    do        
        package=$(basename $p $ext)

        echo "$p"
        echo "$nuget_baseurl$package/"

        if [ $dryrun -eq 0 ]; then
            #dotnet_execute nuget push $p -k $nuget_auth_user:$nuget_auth_key -s $nuget_baseurl$package/
            echo "nuget push $p -k $nuget_auth_user:$nuget_auth_key -s $nuget_baseurl$package/"
        fi
    done
}

pack_dir=$wrkdir/$tmp/$configuration
if [ -d "$pack_dir" ]; then
    push_dir $(ls $pack_dir/*.nupkg | grep -v symbols) ".${version}.nupkg"
    if [ $symbols -gt 0 ]; then
        push_dir $(ls $pack_dir/*.symbols.nupkg) ".${version}.symbols.nupkg"
    fi
else
    echo "Cannot find any packages to push in ($pack_dir)"
    exit 1
fi
