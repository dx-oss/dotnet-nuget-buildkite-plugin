#!/bin/bash

# https://buildkite.com/docs/pipelines/writing-build-scripts
set -euo pipefail

# common

pwd=$(pwd)

docker=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOCKER:-docker}
debug=${BUILDKITE_PLUGIN_DOTNET_NUGET_DEBUG:-0}
if [ $debug -gt 0 ]; then
    set -euox pipefail

    if [ $debug -eq 2 ]; then
        env
    fi

    $docker version
    $docker ps
    whoami
    pwd
fi

version=${VERSION:-""}
version=${BUILDKITE_PLUGIN_DOTNET_NUGET_VERSION:-$version}
if [ -z "$version" ]; then
    echo "VERSION is empty"
    exit 1
fi

tmp=.tmp
tmp=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOCKER:-$tmp}

# dotnet runtime version
runtime="3.1"
runtime=${BUILDKITE_PLUGIN_DOTNET_NUGET_RUNTIME:-$runtime}
# docker image with dotnet runtime version 
image="dxdx/docker-builder-dotnet:$runtime"
image=${BUILDKITE_PLUGIN_DOTNET_NUGET_IMAGE:-$image}

src=${BUILDKITE_PLUGIN_DOTNET_NUGET_SRC:-src}
tpl=${BUILDKITE_PLUGIN_DOTNET_NUGET_TPL:-nuget.config.tpl}
dotnet=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOTNET:-dotnet}
buildkite_agent=${BUILDKITE_PLUGIN_DOTNET_NUGET_AGENT:-buildkite-agent}
configuration=${BUILDKITE_PLUGIN_DOTNET_NUGET_CONFIGURATION:-Release}
symbols=${BUILDKITE_PLUGIN_DOTNET_NUGET_SYMBOLS:-1}
dryrun=${BUILDKITE_PLUGIN_DOTNET_NUGET_DRY:-0}

# github
github_owner=$(echo "$BUILDKITE_REPO" | cut -d: -f 2 | cut -d/ -f 1)
github_repo=$(echo "$BUILDKITE_REPO" | cut -d: -f 2 | cut -d/ -f 2 | cut -d. -f 1)

# nuget - check if a key is set and it exists in env, if not use default env
nuget_provider=${BUILDKITE_PLUGIN_DOTNET_NUGET_PROVIDER:-$NUGET_PROVIDER}
if [ "$nuget_provider" = "github" ]; then
    nuget_baseurl=${GITHUB_PACKAGE_NUGET_BASEURL}
    nuget_pushurl=${GITHUB_PACKAGE_NUGET_PUSHURL}
    nuget_auth_user=${GITHUB_PACKAGE_NUGET_USER}
    nuget_auth_secret=${GITHUB_PACKAGE_NUGET_SECRET}
elif [ "$nuget_provider" = "jfrog" ]; then
    nuget_baseurl=${JFROG_NUGET_BASEURL}
    nuget_pushurl=${JFROG_NUGET_PUSHURL}
    nuget_auth_user=${JFROG_NUGET_USER}
    nuget_auth_secret=${JFROG_NUGET_SECRET}    
else
    nuget_baseurl=${!BUILDKITE_PLUGIN_DOTNET_NUGET_BASEURL}
    nuget_pushurl=${!BUILDKITE_PLUGIN_DOTNET_NUGET_PUSHURL}
    nuget_auth_user=${!BUILDKITE_PLUGIN_DOTNET_NUGET_AUTH_USER}
    nuget_auth_secret=${!BUILDKITE_PLUGIN_DOTNET_NUGET_AUTH_SECRET}
fi
nuget_baseurl=${nuget_baseurl:-$NUGET_BASEURL}
nuget_pushurl=${nuget_pushurl:-$NUGET_PUSHURL}
nuget_auth_user=${nuget_auth_user:-$NUGET_AUTH_USER}
nuget_auth_secret=${nuget_auth_secret:-$NUGET_AUTH_SECRET}

#nuget_packages=${BUILDKITE_PLUGIN_DOTNET_NUGET_PACKAGES}
pull=${BUILDKITE_PLUGIN_DOTNET_NUGET_PULL:-1}
if [ $pull -gt 0 ]; then
    $docker pull $image
fi

if [ -z "$nuget_provider" ]; then
    echo "NUGET_PROVIDER is empty"
    exit 1
elif [ -z "$nuget_baseurl" ]; then
    echo "NUGET_BASEURL is empty"
    exit 1
elif [ -z "$nuget_pushurl" ]; then
    echo "NUGET_PUSHURL is empty"
    exit 1    
elif [ -z "$nuget_auth_user" ]; then
    echo "NUGET_AUTH_USER is empty"
    exit 1
elif [ -z "$nuget_auth_secret" ]; then
    echo "NUGET_AUTH_SECRET is empty"
    exit 1    
fi

export NUGET_BASEURL=$nuget_baseurl
export NUGET_AUTH_USER=$nuget_auth_user
export NUGET_AUTH_SECRET=$nuget_auth_secret

# folders
wrkdir=$pwd
docker_wrkdir=/build
if [ -d "$src" ]; then
    wrkdir=$wrkdir/$src
    docker_wrkdir=$docker_wrkdir/$src
fi

if [ -d "$src" ]; then
    if [ -e "$tpl" ]; then
        cp $tpl $src/NuGet.Config
    fi
elif [ -e "$tpl" ]; then
    cp $tpl NuGet.Config
fi

if [ ! -d "$tmp" ]; then
    mkdir $tmp -p
fi

function dotnet_execute() {
    env > .env
    # $docker run -e "NUGET_BASEURL=$nuget_baseurl" -e "NUGET_AUTH_USER=$nuget_auth_user" -e "NUGET_AUTH_KEY=$nuget_auth_secret" -v $pwd:/build -w $wrkdir --entrypoint $dotnet $image $*
    $docker run --env-file .env -v $pwd:/build -w $docker_wrkdir --entrypoint $dotnet $image $*
    # TODO: need to delete the file event when the run failed
    rm .env
}

if [ $debug -gt 0 ]; then
    dotnet_execute --info
    dotnet_execute --list-runtimes
    dotnet_execute --list-sdks
    dotnet_execute nuget --version
fi

# pack

dotnet_execute pack -c $configuration /p:Version=$version --include-symbols -o $tmp/$configuration

# push

# TODO: check packages input

function push_dir() {
    local packages=$1
    local wdir=$2
    local ext=$3

    for p in $packages
    do        
        package=$(basename $p $ext)
        pb=$(basename $p)
        pb=$wdir/$pb
        
        local url=$(echo "$nuget_baseurl" | sed -s "s/PACKAGE/$package/gi")
        
        $buildkite_agent annotate --style info "nuget push $pb -s $url"

        if [ $dryrun -eq 0 ]; then
            dotnet_execute nuget push $pb -k "$nuget_auth_user:$nuget_auth_secret" -s $url  
        fi
    done
}

pack_dir=$wrkdir/$tmp/$configuration
if [ -d "$pack_dir" ]; then
    docker_pack_dir=$docker_wrkdir/$tmp/$configuration
    push_dir "$(ls $pack_dir/*.nupkg | grep -v symbols)" $docker_pack_dir ".${version}.nupkg"
    # if [ $symbols -gt 0 ]; then
    #     push_dir $(ls $pack_dir/*.symbols.nupkg) ".${version}.symbols.nupkg"
    # fi
else
    echo "Cannot find any packages to push in ($pack_dir)"
    exit 1
fi
