#!/bin/bash

# https://buildkite.com/docs/pipelines/writing-build-scripts
set -euo pipefail

# common

pwd=$(pwd)

docker=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOCKER:-docker}
debug=${BUILDKITE_PLUGIN_DOTNET_NUGET_DEBUG:-0}
if [ $debug -gt 0 ]; then
    set -euox pipefail

    env
    $docker version
    $docker ps
    whoami
    pwd    
fi

tmp=.tmp
tmp=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOCKER:-$tmp}

image="dxdx/docker-builder-dotnet:2.2"
image=${BUILDKITE_PLUGIN_DOTNET_NUGET_IMAGE:-$image}

src=${BUILDKITE_PLUGIN_DOTNET_NUGET_SRC:-$pwd/src}
tpl=${BUILDKITE_PLUGIN_DOTNET_NUGET_SRC:-nuget.config.tpl}
version=${BUILDKITE_PLUGIN_DOTNET_NUGET_VERSION:-0.0.0}
dotnet=${BUILDKITE_PLUGIN_DOTNET_NUGET_DOTNET:-dotnet}
buildkite_agent=${BUILDKITE_PLUGIN_DOTNET_NUGET_AGENT:-buildkite-agent}

pull=${BUILDKITE_PLUGIN_DOTNET_NUGET_PULL:-1}
if [ $pull -gt 0 ]; then
    $docker pull $image
fi

function dotnet_execute() {
    $docker run -v $pwd:/src -w /src --entrypoint $dotnet $*
}

if [ $debug -gt 0 ]; then
    dotnet_execute --info
    dotnet_execute --list-runtimes
    dotnet_execute --list-sdks
    dotnet_execute nuget --version
fi

# pack

if [ -e "$src" ]; then
    if [ -e "$tpl" ]; then
        cp $tpl $src/NuGet.Config
    fi

    cd $src
elif [ -e "$tpl" ]; then
    cp $tpl NuGet.Config
fi

if [ -e "$tmp" ]; then
    mkdir $tmp -p
fi
dotnet_execute pack -c Release /p:Version=$version --include-symbols -o $tmp/Release

# push
